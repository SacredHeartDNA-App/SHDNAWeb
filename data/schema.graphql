type Query {
  viewer: User!
  user(id: ID!): User
  verifyToken(token: String!): User
  verifyTokenWeb: User
  userPosts(userId: ID!): [Post!]
  posts: [Post!]
  news: [News!]
  newsComments(contentId: ID!): [Comment!]
  getContentComments(contentId: ID!, relationship: ContentEnum!): [Comment!]
  getMissingChallenges(type: ChallengeType!): [Challenge!]
  getCompletedChallenges(type: ChallengeType!): [Challenge!]
  getAllChallenges(type: ChallengeType!): [Challenge!]
  getJournals: [Journal!]
  getCommunities: [Community!]
  downloadTranslations: [Translation!]
  getUntranslatedTexts: [Translation!]
  getPastTranslations: [Translation!]
  getMeditations: [Meditation!]
  getMeditationsById(ids: [String!]): [Meditation!]
  getPodcastEpisodes: [PodcastChapter!]
  # Search Algorithms
  searchMeditation(query: String!): [Meditation!]
}

type Mutation {
  signUp(input: SignUpInput!): Int!
  signIn(email: String!, password: String!, adminOnly: Boolean): AuthUser!
  logOut: Int
  desactivateAccount: Int
  deleteAccount: Int
  updateProfile(input: UpdateUserInput!): Int
  addFriend(user: String!, friend: String!): [User!]
  createArticle(input: CreateNewsInput!): Int
  updateArticle(input: EditNewsInput!, id: ID!): Int
  deleteArticle(id: ID!): Int
  createComment(text: String!, content_id: ID!, relationship: ContentEnum!): Int
  likeContent(contentId: ID!, contentType: ContentEnum!): Int
  unlikeContent(contentId: ID!, contentType: ContentEnum!): Int
  createPost(input: PostInput!): Post
  deletePost(postId: ID!): Int
  deleteComment(commentId: ID!): Int
  createChallenge(input: ChallengeInput!): Int
  updateChallenge(id: ID!, title: String, question: String): Int
  createAnswerChallenge(input: AnswerInput!): Int
  createJournal(title: String!, text: String!, value: ChallengeType!): Int
  updateJournal(id: ID!, title: String, text: String, value: ChallengeType): Int
  deleteJournal(journalId: ID!): Int
  sendTranslations(texts: [TranslationInput!]): Int
  updateTranslation(text: UpdateTranslationInput!): Int
  createNewMeditation(input: CreateMeditationInput!): Int
  updateMeditation(input: UpdateMeditationInput!): Int
  deleteMeditation(id: ID!): Int
  reportPost(postId: ID!, reason: String!): Int
  createEpisode(input: EpisodeInput!): Int
  updateEpisode(input: UpdateEpisodeInput!): Int
}

scalar Date

enum ROLES {
  USER
  EDITOR
  ADMIIN
}

enum ContentEnum {
  NEWS
  POSTS
  COMMENTS
}

input SignUpInput {
  email: String!
  password: String!
  name: String!
  lastName: String!
  community: ID!
  birthday: Date!
  bio: String
  profilePic: MediaInput
}

input UpdateUserInput {
  bio: String
  media: MediaInput
  name: String
  lastName: String
}

input CreateNewsInput {
  title: String!
  text: String!
  cover: MediaInput
  media: [MediaInput]
  extLinks: [String]
}

input EditNewsInput {
  title: String
  text: String
  cover: MediaInput
  media: [MediaInput]
  extLinks: [String]
}

input PostInput {
  text: String!
  media: [MediaInput]
}

input AnswerInput {
  answer: String
  media: [MediaInput]
  challengeId: String!
}

input MediaInput {
  uri: String!
  type: String!
  fileName: String!
  base64: String!
}

input EpisodeInput {
  title: String!
  audio: MediaInput!
}

input UpdateEpisodeInput {
  id: ID!
  title: String
  audio: MediaInput
}

interface Node {
  id: ID!
}

type User implements Node {
  name: String!
  lastName: String!
  birthday: String!
  friends: [User!]
  community: Community
  email: String!
  profilePic: String
  id: ID!
  role: ROLES!
  bio: String
}

type AuthUser {
  user: User!
  authToken: String!
}

type Community implements Node {
  id: ID!
  city: String
  state: String
  country: String!
  zipCode: String
  name: String!
}

type Post implements Node {
  id: ID!
  text: String
  user: User!
  likes: Int!
  isLikedByUser: Boolean!
  media: [String!]
  comments: [Comment!]
  isOwner: Boolean
  noComments: Int!
}

type News implements Node {
  id: ID!
  text: String!
  user: User!
  title: String!
  likes: Int!
  isLikedByUser: Boolean!
  comments: [Comment!]
  cover: String!
  extLinks: [String!]
  gallery: [String!]
}

type Comment implements Node {
  id: ID!
  author: User!
  likes: Int!
  isLikedByUser: Boolean!
  comments: [Comment!]
  text: String!
  isOwner: Boolean!
}

type Journal implements Node {
  id: ID!
  title: String!
  text: String!
  value: ChallengeType
  created_at: Date!
}

# ESPACIO Objects

enum AnswerType {
  ANSWER_CLOSE
  ANSWER_OPEN
  VIEW_MEDIA
  UPLOAD_FILE
}

enum ChallengeType {
  PERSONAL_INTEGRITY
  SPIRITUALITY
  BELONGING_COMMUNITY
  ACTIVE_CITIZENSHIP
  TRANSFORMATIVE_ACTION
}

type Challenge implements Node {
  id: ID!
  question: String!
  title: String!
  isLocked: Boolean!
  challengeType: ChallengeType!
  answer: String
  answerType: AnswerType!
  options: [String]
  suggestedMeditations: [String!]
  scheduledTime: Date
}

input ChallengeInput {
  title: String!
  question: String!
  media: MediaInput
  options: [String]
  challengeType: ChallengeType!
  answerType: AnswerType!
  scheduledTime: Date
}

type Translation {
  id: ID!
  text: String!
  description: String!
  es_t: String
  pl_t: String
}

input TranslationInput {
  text: String!
  description: String!
}

input UpdateTranslationInput {
  id: ID!
  es_t: String
  pl_t: String
}

type Meditation implements Node {
  id: ID!
  title: String!
  description: String!
  cover: String!
  media: String!
  mediaType: MediaType!
  isSeen: Boolean!
  created_at: Date!
}

type PodcastChapter implements Node {
  id: ID!
  title: String!
  description: String!
  audio_url: String!
  created_at: Date!
}

enum MediaType {
  VIDEO
  AUDIO
  IMAGE
}

input CreateMeditationInput {
  title: String!
  description: String!
  cover: MediaInput!
  media: MediaInput!
  suggestedMeditations: [String!]
}

input UpdateMeditationInput {
  id: ID!
  title: String
  description: String
}
